random/000002_000000000002.input
#recursive steps: 1

random/000002_000000000006.input
1
#recursive steps: 5

random/000002_000000000012.input
2
1
#recursive steps: 13

random/000002_000000000002.input
#recursive steps: 1

random/000002_000000000006.input
1
#recursive steps: 5

random/000002_000000000012.input
2
1
#recursive steps: 13

random/000002_000000000020.input
2
1
#recursive steps: 13

random/000004_000000000004.input
#recursive steps: 1

random/000004_000000000012.input
<<<<<<< HEAD
4
3
2
1
#recursive steps: 61

random/000004_000000000024.input
4
3
2
1
#recursive steps: 61

random/000004_000000000040.input
4
3
2
1
#recursive steps: 61

random/000006_000000000007.input
2
#recursive steps: 5

random/000006_000000000018.input
6
5
4
2
#recursive steps: 61

random/000006_000000000036.input
6
3
2
1
#recursive steps: 61

random/000006_000000000060.input
6
5
4
3
2
#recursive steps: 125

random/000008_000000000009.input
5
#recursive steps: 5

random/000008_000000000024.input
8
7
6
4
2
#recursive steps: 125

random/000008_000000000048.input
7
6
5
4
3
2
1
#recursive steps: 509

random/000008_000000000080.input
7
6
5
4
3
2
1
#recursive steps: 509

random/000010_000000000012.input
6
2
#recursive steps: 13

random/000010_000000000030.input
10
9
8
7
6
5
2
1
#recursive steps: 1021

random/000010_000000000060.input
10
9
8
7
6
5
4
3
2
1
#recursive steps: 4093

random/000010_000000000100.input
10
9
8
7
6
5
4
3
2
1
#recursive steps: 4093

random/000012_000000000014.input
4
#recursive steps: 5

random/000012_000000000036.input
12
11
9
8
7
6
5
4
3
1
#recursive steps: 4093

random/000012_000000000072.input
12
11
9
8
7
6
5
4
3
2
1
#recursive steps: 8189

random/000012_000000000120.input
11
10
9
8
7
6
5
4
3
2
1
#recursive steps: 8189

random/000014_000000000016.input
13
6
#recursive steps: 13

random/000014_000000000042.input
14
13
12
11
10
5
2
1
#recursive steps: 1021

random/000014_000000000084.input
14
13
12
11
10
9
8
7
6
5
4
3
1
#recursive steps: 32765

random/000014_000000000140.input
14
13
12
11
10
9
8
7
6
5
4
2
1
#recursive steps: 32765

random/000016_000000000019.input
9
#recursive steps: 5

random/000016_000000000048.input
16
13
12
11
10
9
7
6
3
2
1
#recursive steps: 8189

random/000016_000000000096.input
16
15
14
13
12
11
10
9
8
7
6
5
3
2
1
#recursive steps: 131069

random/000016_000000000160.input
16
15
13
14
12
11
10
9
8
6
4
7
3
2
1
#recursive steps: 139291

random/000018_000000000021.input
12
4
#recursive steps: 13

random/000018_000000000054.input
18
17
13
12
11
10
8
7
6
5
4
#recursive steps: 8189

random/000018_000000000108.input
18
16
15
17
14
13
12
11
10
7
6
5
4
3
2
#recursive steps: 131100

random/000018_000000000180.input
18
17
16
15
14
12
11
10
9
13
7
6
8
5
3
2
1
#recursive steps: 543738

random/000020_000000000024.input
19
15
#recursive steps: 13

random/000020_000000000060.input
20
19
17
16
15
13
11
10
9
5
4
3
2
26
1
#recursive steps: 131069

random/000020_000000000120.input
20
18
17
16
15
13
19
12
11
10
8
7
6
5
4
3
2
1
#recursive steps: 1048828

random/000020_000000000200.input
20
18
19
17
16
15
14
13
12
11
9
8
7
6
4
3
2
1
#recursive steps: 1048588

random/000022_000000000026.input
19
18
16
#recursive steps: 29

random/000022_000000000066.input
22
20
19
18
17
16
15
14
13
11
10
8
6
3
2
#recursive steps: 131069

random/000022_000000000132.input
22
21
20
19
18
16
15
12
11
10
9
8
17
7
6
5
4
3
2
#recursive steps: 2113563

random/000022_000000000220.input
22
21
20
19
16
17
14
13
18
12
10
9
8
11
5
15
6
4
3
1
#recursive steps: 4621432

random/000024_000000000028.input
21
17
10
3
#recursive steps: 61

random/000024_000000000072.input
20
17
16
15
14
10
18
7
6
22
3
2
#recursive steps: 19194

random/000024_000000000144.input
23
22
21
19
18
16
20
14
13
12
11
10
9
8
15
24
7
6
5
4
2
1
#recursive steps: 17236217

random/000024_000000000240.input

random/000026_000000000031.input
22
20
29
16
4
#recursive steps: 140

random/000026_000000000078.input
26
25
24
23
22
21
20
18
17
16
14
11
10
9
7
6
5
4
2
1
#recursive steps: 4194301

random/000026_000000000156.input

random/000026_000000000260.input

random/000028_000000000033.input
18
8
30
5
#recursive steps: 61

random/000028_000000000084.input
28
24
21
20
22
19
17
12
11
10
23
9
7
26
6
16
3
45
2
1
#recursive steps: 4362297

random/000028_000000000168.input

random/000028_000000000280.input

random/000030_000000000036.input
28
22
17
32
11
#recursive steps: 125

random/000030_000000000090.input
30
29
26
25
22
19
17
20
16
15
14
13
12
5
4
11
7
3
2
10
1
#recursive steps: 11403768

random/000030_000000000180.input

random/000030_000000000300.input

random/000035_000000000042.input
34
33
21
20
9
8
#recursive steps: 253

random/000035_000000000105.input

random/000035_000000000210.input

random/000035_000000000350.input

random/000040_000000000048.input
39
47
17
46
48
44
41
#recursive steps: 985

random/000040_000000000120.input

dimacs/karate.graph.dimacs
30
26
28
33
32
34
9
7
6
5
4
3
2
1
#recursive steps: 65701

dimacs/dolphins.graph.dimacs

dimacs/chesapeake.graph.dimacs

dimacs/adjnoun.graph.dimacs

dimacs/polbooks.graph.dimacs

dimacs/football.graph.dimacs

dimacs/celegans_metabolic.graph.dimacs

dimacs/jazz.graph.dimacs

dimacs/netscience.graph.dimacs

dimacs/email.graph.dimacs

dimacs/add20.graph.dimacs

dimacs/power.graph.dimacs

dimacs/uk.graph.dimacs

snap/as20000102.txt.dimacs

snap/email-Eu-core.txt.dimacs

snap/ca-GrQc.txt.dimacs

snap/p2p-Gnutella08.txt.dimacs

snap/ca-HepTh.txt.dimacs

snap/p2p-Gnutella09.txt.dimacs

snap/p2p-Gnutella06.txt.dimacs

snap/p2p-Gnutella05.txt.dimacs

snap/p2p-Gnutella04.txt.dimacs

snap/p2p-Gnutella25.txt.dimacs

snap/facebook_combined.txt.dimacs

=======
random/000002_000000000002.input
#recursive steps: 1

random/000002_000000000006.input
>>>>>>> 879e504c3ab88dc09cff77fa47f2db0622249519
random/000002_000000000002.input
#recursive steps: 1

random/000002_000000000006.input
1
#recursive steps: 5

random/000002_000000000012.input
2
1
#recursive steps: 13

random/000002_000000000020.input
2
1
#recursive steps: 13

random/000004_000000000004.input
#recursive steps: 1

random/000004_000000000012.input
4
3
2
1
#recursive steps: 61

random/000004_000000000024.input
4
3
2
1
#recursive steps: 61

random/000004_000000000040.input
4
3
2
1
#recursive steps: 61

random/000006_000000000007.input
2
#recursive steps: 5

random/000006_000000000018.input
6
5
4
2
#recursive steps: 61

random/000006_000000000036.input
6
3
2
1
#recursive steps: 61

random/000006_000000000060.input
6
5
4
3
2
#recursive steps: 125

random/000008_000000000009.input
5
#recursive steps: 5

random/000008_000000000024.input
8
7
6
4
2
#recursive steps: 125

random/000008_000000000048.input
7
6
5
4
3
2
1
#recursive steps: 509

random/000008_000000000080.input
7
6
5
4
3
2
1
#recursive steps: 509

random/000010_000000000012.input
6
2
#recursive steps: 13

random/000010_000000000030.input
10
9
8
7
6
5
2
1
#recursive steps: 1021

random/000010_000000000060.input
10
9
8
7
6
5
4
3
2
1
#recursive steps: 4093

random/000010_000000000100.input
10
9
8
7
6
5
4
3
2
1
#recursive steps: 4093

random/000012_000000000014.input
4
#recursive steps: 5

random/000012_000000000036.input
12
11
9
8
7
6
5
4
3
1
#recursive steps: 4093

random/000012_000000000072.input
12
11
9
8
7
6
5
4
3
2
1
#recursive steps: 8189

random/000012_000000000120.input
11
10
9
8
7
6
5
4
3
2
1
#recursive steps: 8189

random/000014_000000000016.input
13
6
#recursive steps: 13

random/000014_000000000042.input
14
13
12
11
10
5
2
1
#recursive steps: 1021

random/000014_000000000084.input
14
13
12
11
10
9
8
7
6
5
4
3
1
#recursive steps: 32765

random/000014_000000000140.input
14
13
12
11
10
9
8
7
6
5
4
2
1
#recursive steps: 32765

random/000016_000000000019.input
9
#recursive steps: 5

random/000016_000000000048.input
16
13
12
11
10
9
7
6
3
2
1
#recursive steps: 8189

random/000016_000000000096.input
16
15
14
13
12
11
10
9
8
7
6
5
3
2
1
#recursive steps: 131069

random/000016_000000000160.input
16
15
13
14
12
11
10
9
8
6
4
7
3
2
1
#recursive steps: 139291

random/000018_000000000021.input
12
4
#recursive steps: 13

random/000018_000000000054.input
18
17
13
12
11
10
8
7
6
5
4
#recursive steps: 8189

random/000018_000000000108.input
18
16
15
17
14
13
12
11
10
7
6
5
4
3
2
#recursive steps: 131100

random/000018_000000000180.input
18
17
16
15
14
12
11
10
9
13
7
6
8
5
3
2
1
#recursive steps: 543738

random/000020_000000000024.input
19
15
#recursive steps: 13

random/000020_000000000060.input
20
19
17
16
15
13
11
10
9
5
4
3
2
26
1
#recursive steps: 131069

random/000020_000000000120.input
20
18
17
16
15
13
19
12
11
10
8
7
6
5
4
3
2
1
#recursive steps: 1048828

random/000020_000000000200.input
20
18
19
17
16
15
14
13
12
11
9
8
7
6
4
3
2
1
#recursive steps: 1048588

random/000022_000000000026.input
19
18
16
#recursive steps: 29

random/000022_000000000066.input
22
20
19
18
17
16
15
14
13
11
10
8
6
3
2
#recursive steps: 131069

random/000022_000000000132.input
22
21
20
19
18
16
15
12
11
10
9
8
17
7
6
5
4
3
2
#recursive steps: 2113563

random/000022_000000000220.input
22
21
20
19
16
17
14
13
18
12
10
9
8
11
5
15
6
4
3
1
#recursive steps: 4621432

random/000024_000000000028.input
21
17
10
3
#recursive steps: 61

random/000024_000000000072.input
20
17
16
15
14
10
18
7
6
22
3
2
#recursive steps: 19194

random/000024_000000000144.input
23
22
21
19
18
16
20
14
13
12
11
10
9
8
15
24
7
6
5
4
2
1
#recursive steps: 17236217

random/000024_000000000240.input

random/000026_000000000031.input
22
20
29
16
4
#recursive steps: 140

random/000026_000000000078.input
26
25
24
23
22
21
20
18
17
16
14
11
10
9
7
6
5
4
2
1
#recursive steps: 4194301

random/000026_000000000156.input

random/000026_000000000260.input

random/000028_000000000033.input
18
8
30
5
#recursive steps: 61

random/000028_000000000084.input
28
24
21
20
22
19
17
12
11
10
23
9
7
26
6
16
3
45
2
1
#recursive steps: 4362297

random/000028_000000000168.input

random/000028_000000000280.input

random/000030_000000000036.input
28
22
17
32
11
#recursive steps: 125

random/000030_000000000090.input
30
29
26
25
22
19
17
20
16
15
14
13
12
5
4
11
7
3
2
10
1
#recursive steps: 11403768

random/000030_000000000180.input

random/000030_000000000300.input

random/000035_000000000042.input
34
33
21
20
9
8
#recursive steps: 253

random/000035_000000000105.input

random/000035_000000000210.input

random/000035_000000000350.input

random/000040_000000000048.input
39
47
17
46
48
44
41
#recursive steps: 985

random/000040_000000000120.input

dimacs/karate.graph.dimacs
30
26
28
33
32
34
9
7
6
5
4
3
2
1
#recursive steps: 65701

dimacs/dolphins.graph.dimacs

dimacs/chesapeake.graph.dimacs

dimacs/adjnoun.graph.dimacs

dimacs/polbooks.graph.dimacs

dimacs/football.graph.dimacs

dimacs/celegans_metabolic.graph.dimacs

dimacs/jazz.graph.dimacs

dimacs/netscience.graph.dimacs

dimacs/email.graph.dimacs

dimacs/add20.graph.dimacs

dimacs/power.graph.dimacs

dimacs/uk.graph.dimacs

snap/as20000102.txt.dimacs

snap/email-Eu-core.txt.dimacs

snap/ca-GrQc.txt.dimacs

snap/p2p-Gnutella08.txt.dimacs

snap/ca-HepTh.txt.dimacs

snap/p2p-Gnutella09.txt.dimacs

snap/p2p-Gnutella06.txt.dimacs

snap/p2p-Gnutella05.txt.dimacs

snap/p2p-Gnutella04.txt.dimacs

snap/p2p-Gnutella25.txt.dimacs

snap/facebook_combined.txt.dimacs

random/000002_000000000002.input

random/000002_000000000006.input
1
#recursive steps: 5

random/000002_000000000012.input
2
1
#recursive steps: 13

random/000002_000000000020.input
2
1
#recursive steps: 13

random/000004_000000000004.input

random/000004_000000000012.input
random/000002_000000000002.input

random/000002_000000000006.input
1
#recursive steps: 5

random/000002_000000000012.input
2
1
#recursive steps: 13

random/000002_000000000020.input
2
1
#recursive steps: 13

random/000004_000000000004.input

random/000004_000000000012.input
4
3
2
1
#recursive steps: 61

random/000004_000000000024.input
4
3
2
1
#recursive steps: 61

random/000004_000000000040.input
4
3
2
1
#recursive steps: 61

random/000006_000000000007.input
2
#recursive steps: 5

random/000006_000000000018.input
6
5
4
2
#recursive steps: 61

random/000006_000000000036.input
6
3
2
1
#recursive steps: 61

random/000006_000000000060.input
6
5
4
3
2
#recursive steps: 125

random/000008_000000000009.input
5
#recursive steps: 5

random/000008_000000000024.input
8
7
6
4
2
#recursive steps: 125

random/000008_000000000048.input
7
6
5
4
3
2
1
#recursive steps: 509

random/000008_000000000080.input
7
6
5
4
3
2
1
#recursive steps: 509

random/000010_000000000012.input
6
2
#recursive steps: 13

random/000010_000000000030.input
10
9
8
7
6
5
2
1
#recursive steps: 1021

random/000010_000000000060.input
10
9
8
7
6
5
4
3
2
1
#recursive steps: 4093

random/000010_000000000100.input
10
9
8
7
6
5
4
3
2
1
#recursive steps: 4093

random/000012_000000000014.input
4
#recursive steps: 5

random/000012_000000000036.input
12
11
9
8
7
6
5
4
3
1
#recursive steps: 4093

random/000012_000000000072.input
12
11
9
8
7
6
5
4
3
2
1
#recursive steps: 8189

random/000012_000000000120.input
11
10
9
8
7
6
5
4
3
2
1
#recursive steps: 8189

random/000014_000000000016.input
13
6
#recursive steps: 13

random/000014_000000000042.input
14
13
12
11
10
5
2
1
#recursive steps: 1021

random/000014_000000000084.input
14
13
12
11
10
9
8
7
6
5
4
3
1
#recursive steps: 32765

random/000014_000000000140.input
14
13
12
11
10
9
8
7
6
5
4
2
1
#recursive steps: 32765

random/000016_000000000019.input
9
#recursive steps: 5

random/000016_000000000048.input
16
13
12
11
10
9
7
6
3
2
1
#recursive steps: 8189

random/000016_000000000096.input
16
15
14
13
12
11
10
9
8
7
6
5
3
2
1
#recursive steps: 131069

random/000016_000000000160.input
16
15
13
14
12
11
10
9
8
6
4
7
3
2
1
#recursive steps: 139291

random/000018_000000000021.input
12
4
#recursive steps: 13

random/000018_000000000054.input
18
17
13
12
11
10
8
7
6
5
4
#recursive steps: 8189

random/000018_000000000108.input
18
16
15
17
14
13
12
11
10
7
6
5
4
3
2
#recursive steps: 131100

random/000018_000000000180.input
18
17
16
15
14
12
11
10
9
13
7
6
8
5
3
2
1
#recursive steps: 543738

random/000020_000000000024.input
19
15
#recursive steps: 13

random/000020_000000000060.input
20
19
17
16
15
13
11
10
9
5
4
3
2
26
1
#recursive steps: 131069

random/000020_000000000120.input
20
18
17
16
15
13
19
12
11
10
8
7
6
5
4
3
2
1
#recursive steps: 1048828

random/000020_000000000200.input
20
18
19
17
16
15
14
13
12
11
9
8
7
6
4
3
2
1
#recursive steps: 1048588

random/000022_000000000026.input
19
18
16
#recursive steps: 29

random/000022_000000000066.input
22
20
19
18
17
16
15
14
13
11
10
8
6
3
2
#recursive steps: 131069

random/000022_000000000132.input
22
21
20
19
18
16
15
12
11
10
9
8
17
7
6
5
4
3
2
#recursive steps: 2113563

random/000022_000000000220.input
22
21
20
19
16
17
14
13
18
12
10
9
8
11
5
15
6
4
3
1
#recursive steps: 4621432

random/000024_000000000028.input
21
17
10
3
#recursive steps: 61

random/000024_000000000072.input
20
17
16
15
14
10
18
7
6
22
3
2
#recursive steps: 19194

random/000024_000000000144.input
23
22
21
19
18
16
20
14
13
12
11
10
9
8
15
24
7
6
5
4
2
1
#recursive steps: 17236217

random/000024_000000000240.input

random/000026_000000000031.input
22
20
29
16
4
#recursive steps: 140

random/000026_000000000078.input
26
25
24
23
22
21
20
18
17
16
14
11
10
9
7
6
5
4
2
1
#recursive steps: 4194301

random/000026_000000000156.input

random/000026_000000000260.input

random/000028_000000000033.input
18
8
30
5
#recursive steps: 61

random/000028_000000000084.input
28
24
21
20
22
19
17
12
11
10
23
9
7
26
6
16
3
45
2
1
#recursive steps: 4362297

random/000028_000000000168.input

random/000028_000000000280.input

random/000030_000000000036.input
28
22
17
32
11
#recursive steps: 125

random/000030_000000000090.input
30
29
26
25
22
19
17
20
16
15
14
13
12
5
4
11
7
3
2
10
1
#recursive steps: 11403768

random/000030_000000000180.input

random/000030_000000000300.input

random/000035_000000000042.input
34
33
21
20
9
8
#recursive steps: 253

random/000035_000000000105.input

random/000035_000000000210.input

random/000035_000000000350.input

random/000040_000000000048.input
39
47
17
46
48
44
41
#recursive steps: 985

random/000040_000000000120.input

dimacs/karate.graph.dimacs
30
26
28
33
32
34
9
7
6
5
4
3
2
1
#recursive steps: 65701

dimacs/dolphins.graph.dimacs

dimacs/chesapeake.graph.dimacs
16
15
14
18
17
9
12
11
32
30
38
36
33
8
2
7
39
22
35
37
5
1
#recursive steps: 23198827

dimacs/adjnoun.graph.dimacs

dimacs/polbooks.graph.dimacs

dimacs/football.graph.dimacs

dimacs/celegans_metabolic.graph.dimacs

dimacs/jazz.graph.dimacs

dimacs/netscience.graph.dimacs

dimacs/email.graph.dimacs

dimacs/add20.graph.dimacs

dimacs/power.graph.dimacs

dimacs/uk.graph.dimacs

snap/as20000102.txt.dimacs

snap/email-Eu-core.txt.dimacs

snap/ca-GrQc.txt.dimacs

snap/p2p-Gnutella08.txt.dimacs

snap/ca-HepTh.txt.dimacs

snap/p2p-Gnutella09.txt.dimacs

snap/p2p-Gnutella06.txt.dimacs

snap/p2p-Gnutella05.txt.dimacs

snap/p2p-Gnutella04.txt.dimacs

snap/p2p-Gnutella25.txt.dimacs

snap/facebook_combined.txt.dimacs

random/000002_000000000002.input

random/000002_000000000006.input
1
#recursive steps: 5

random/000002_000000000012.input
7
2
#recursive steps: 11

random/000002_000000000020.input
random/000002_000000000002.input

random/000002_000000000006.input
1
#recursive steps: 5

random/000002_000000000012.input
7
2
#recursive steps: 11

random/000002_000000000020.input
1
2
#recursive steps: 11

random/000004_000000000004.input

random/000004_000000000012.input
1
6
4
3
#recursive steps: 33

random/000004_000000000024.input
2
1
4
3
#recursive steps: 29

random/000004_000000000040.input
4
2
3
1
#recursive steps: 29

random/000006_000000000007.input
7
#recursive steps: 5

random/000006_000000000018.input
12
4
6
2
#recursive steps: 29

random/000006_000000000036.input
18
2
3
6
#recursive steps: 29

random/000006_000000000060.input
5
2
4
6
3
#recursive steps: 41

random/000008_000000000009.input
9
#recursive steps: 5

random/000008_000000000024.input
23
2
8
7
4
#recursive steps: 43

random/000008_000000000048.input
37
2
1
5
7
6
3
#recursive steps: 75

random/000008_000000000080.input
7
5
3
4
6
2
1
#recursive steps: 71

random/000010_000000000012.input
12
11
#recursive steps: 13

random/000010_000000000030.input
10
23
15
8
9
7
2
1
#recursive steps: 211

random/000010_000000000060.input
7
2
9
4
5
3
6
8
10
1
#recursive steps: 157

random/000010_000000000100.input
8
4
10
5
7
3
9
2
6
1
#recursive steps: 131

random/000012_000000000014.input
4
#recursive steps: 5

random/000012_000000000036.input
3
9
33
13
7
4
12
6
1
5
#recursive steps: 381

random/000012_000000000072.input
47
8
1
11
7
3
9
2
5
12
4
#recursive steps: 177

random/000012_000000000120.input
6
7
1
5
2
11
9
8
4
10
3
#recursive steps: 169

random/000014_000000000016.input
15
16
#recursive steps: 13

random/000014_000000000042.input
37
1
12
14
2
10
5
11
#recursive steps: 109

random/000014_000000000084.input
18
3
12
8
10
13
4
9
11
5
6
7
14
#recursive steps: 287

random/000014_000000000140.input
95
2
12
9
7
11
10
8
14
13
1
6
4
#recursive steps: 209

random/000016_000000000019.input
9
#recursive steps: 5

random/000016_000000000048.input
7
2
11
13
6
1
16
12
10
3
9
#recursive steps: 365

random/000016_000000000096.input
11
88
16
6
12
8
1
5
3
9
14
13
7
15
10
#recursive steps: 543

random/000016_000000000160.input
11
6
8
13
16
9
2
4
15
10
12
7
1
3
14
#recursive steps: 275

random/000018_000000000021.input
20
4
#recursive steps: 11

random/000018_000000000054.input
12
26
31
7
13
8
10
17
6
4
11
#recursive steps: 323

random/000018_000000000108.input
2
85
7
5
10
4
14
3
15
6
11
12
17
16
13
#recursive steps: 397

random/000018_000000000180.input
162
102
16
17
18
15
12
1
2
7
13
10
3
14
8
9
5
#recursive steps: 601

random/000020_000000000024.input
19
15
#recursive steps: 11

random/000020_000000000060.input
41
56
9
5
20
15
26
10
19
17
2
11
16
4
3
#recursive steps: 1743

random/000020_000000000120.input
5
120
6
12
20
15
11
8
7
18
3
2
17
16
1
4
19
13
#recursive steps: 1081

random/000020_000000000200.input
82
11
2
20
8
4
14
7
6
15
16
19
9
1
12
3
18
17
#recursive steps: 423

random/000022_000000000026.input
18
25
16
#recursive steps: 23

random/000022_000000000066.input
17
56
8
65
42
20
11
19
15
2
13
14
3
22
16
#recursive steps: 2337

random/000022_000000000132.input
16
2
12
6
21
15
4
20
19
18
5
3
22
10
9
8
11
7
17
#recursive steps: 1037

random/000022_000000000220.input
164
17
11
3
20
8
9
22
10
21
16
14
5
18
4
1
13
12
6
15
#recursive steps: 721

random/000024_000000000028.input
10
28
25
3
#recursive steps: 61

random/000024_000000000072.input
50
20
6
10
7
3
17
14
2
16
18
22
#recursive steps: 293

random/000024_000000000144.input
22
11
15
18
20
5
16
24
10
8
1
2
7
4
14
13
19
9
23
21
12
6
#recursive steps: 1879

random/000024_000000000240.input
124
10
2
12
15
22
8
19
6
16
5
24
3
20
18
11
13
14
1
4
17
23
#recursive steps: 675

random/000026_000000000031.input
4
16
22
28
29
#recursive steps: 95

random/000026_000000000078.input
16
45
18
63
22
20
4
5
7
14
23
11
26
6
9
24
17
2
21
25
#recursive steps: 13131

random/000026_000000000156.input
10
100
64
9
4
1
2
7
20
8
12
13
6
18
19
25
24
23
16
15
26
14
17
#recursive steps: 3269

random/000026_000000000260.input
17
24
7
3
5
9
1
16
2
4
23
18
10
11
13
26
6
22
20
19
25
8
14
15
21
#recursive steps: 1395

random/000028_000000000033.input
29
33
8
30
#recursive steps: 33

random/000028_000000000084.input
6
4
17
71
28
1
16
7
2
20
21
24
12
22
9
23
10
26
19
3
#recursive steps: 6513

random/000028_000000000168.input
12
23
17
4
8
6
14
11
10
7
19
3
16
27
21
1
9
18
2
20
22
13
24
25
5
15
#recursive steps: 5337

random/000028_000000000280.input
190
20
3
21
17
13
28
25
11
27
1
18
16
24
7
23
6
10
4
14
15
2
#recursive steps: 601

random/000030_000000000036.input
17
33
22
11
32
#recursive steps: 67

random/000030_000000000090.input
16
26
66
68
52
13
2
10
12
14
15
7
29
5
4
19
1
25
11
20
3
#recursive steps: 10461

random/000030_000000000180.input
55
118
34
99
29
15
10
24
20
23
28
14
16
17
1
22
26
9
13
27
4
19
2
11
3
8
6
#recursive steps: 4783

random/000030_000000000300.input
17
224
25
8
16
27
23
28
14
10
6
2
7
5
19
26
20
13
1
4
24
29
12
21
11
#recursive steps: 797

random/000035_000000000042.input
20
36
40
34
41
9
#recursive steps: 191

random/000035_000000000105.input
31
72
20
52
9
25
10
33
32
19
5
28
11
6
34
13
29
8
3
4
16
24
22
30
12
2
#recursive steps: 62967

random/000035_000000000210.input
26
13
27
18
9
11
29
4
35
17
6
20
14
23
12
34
5
10
2
3
32
33
7
16
8
19
#recursive steps: 2157

random/000035_000000000350.input
20
203
83
30
4
7
19
23
6
16
24
12
14
25
21
10
26
11
5
28
33
22
29
8
2
27
13
15
9
34
3
17
31
35
#recursive steps: 4295

random/000040_000000000048.input
45
17
48
46
41
47
44
#recursive steps: 99

random/000040_000000000120.input
14
21
26
15
10
77
27
101
29
50
47
94
38
13
12
17
19
22
40
18
1
28
37
23
33
34
39
35
30
4
#recursive steps: 524983

random/000040_000000000240.input
36
40
66
38
27
16
28
10
2
29
23
20
7
4
33
13
6
18
26
9
5
39
15
22
32
30
25
17
14
31
24
1
12
34
37
#recursive steps: 24567

random/000040_000000000400.input
5
268
263
34
8
38
25
17
14
31
39
3
40
7
36
32
15
27
26
2
1
37
6
18
10
29
13
28
30
33
21
4
12
20
23
9
#recursive steps: 3831

random/000045_000000000054.input
17
51
53
12
19
39
#recursive steps: 119

random/000045_000000000135.input
35
41
32
14
120
81
5
40
26
23
20
44
18
8
39
42
12
45
28
17
30
22
37
13
27
21
9
4
10
24
43
29
#recursive steps: 117733

random/000045_000000000270.input
28
121
229
13
38
45
23
17
27
26
14
34
15
19
31
20
22
2
18
21
39
41
4
33
9
35
30
3
24
29
40
7
36
5
32
12
25
11
44
#recursive steps: 22307

random/000045_000000000450.input
30
34
9
43
182
21
12
4
11
39
1
24
5
8
35
25
10
33
18
20
45
44
40
32
15
41
42
3
23
13
38
26
29
27
22
14
28
19
17
7
#recursive steps: 7235

random/000050_000000000060.input
1
21
43
24
51
52
33
49
53
#recursive steps: 733

random/000050_000000000150.input
8
5
19
130
17
33
45
69
44
95
27
143
101
142
49
9
50
40
15
16
35
46
38
7
11
48
26
43
2
1
30
41
21
4
25
92
34
32
37
20
42
31
#recursive steps: 49220635

random/000050_000000000300.input
179
2
40
261
48
23
44
33
39
118
22
37
26
31
38
41
32
50
1
45
43
24
10
13
12
14
17
34
29
20
7
18
15
3
49
4
11
30
35
5
25
46
27
9
47
8
#recursive steps: 91605

random/000050_000000000500.input
38
42
316
30
31
37
10
17
35
43
23
18
1
39
49
26
25
8
3
7
5
46
34
15
6
20
9
22
36
16
47
41
33
24
13
48
14
2
45
28
4
11
32
12
29
21
19
#recursive steps: 14833

random/000055_000000000066.input
56
61
19
22
51
39
60
58
#recursive steps: 259

random/000055_000000000165.input
47
33
19
53
21
16
14
45
139
46
34
164
96
106
22
23
31
55
75
40
29
3
8
30
7
5
42
1
52
36
12
38
41
54
27
4
24
35
37
#recursive steps: 3712343

random/000055_000000000330.input
42
34
3
111
45
16
14
7
33
52
25
48
41
46
36
28
35
5
11
47
13
39
17
49
24
6
2
19
54
38
51
40
10
27
50
43
37
44
8
15
31
18
32
12
1
23
9
20
#recursive steps: 81531

random/000055_000000000550.input
51
40
55
6
27
33
45
47
9
8
54
26
23
50
3
17
37
39
49
29
52
28
22
38
34
44
24
48
12
13
36
31
32
19
4
53
16
2
41
18
15
5
14
46
35
7
10
20
43
#recursive steps: 15815

random/000060_000000000072.input
1
32
64
65
66
17
69
57
72
50
#recursive steps: 1739

random/000060_000000000180.input
133
58
12
57
60
36
28
131
11
148
171
102
55
7
29
54
39
50
120
35
30
52
15
24
53
5
25
3
18
44
48
19
2
40
8
59
42
10
17
27
31
26
16
#recursive steps: 3564309

random/000060_000000000360.input
50
34
13
274
51
36
41
25
19
42
3
55
17
30
4
57
45
5
52
47
37
8
28
20
35
56
2
12
15
29
60
16
49
11
6
40
14
43
24
53
10
1
18
58
22
38
54
31
7
32
#recursive steps: 88499

random/000060_000000000600.input
2
31
59
236
50
23
57
28
1
22
42
21
25
11
40
30
6
47
13
10
34
35
8
16
45
32
12
56
3
41
55
44
36
60
37
15
49
4
17
29
43
18
54
53
39
48
14
7
33
38
52
5
58
#recursive steps: 13707

random/000065_000000000078.input
73
56
68
60
37
58
15
59
53
23
78
#recursive steps: 1471

random/000065_000000000195.input

random/000065_000000000390.input
36
11
35
48
189
302
46
10
40
8
22
12
39
24
19
14
6
65
55
64
9
4
15
63
52
16
26
33
54
50
62
25
20
30
13
42
5
37
45
32
57
31
29
18
27
59
60
58
3
34
44
38
41
61
53
2
17
49
47
#recursive steps: 231183

random/000065_000000000650.input
54
34
6
64
39
44
43
25
46
60
55
50
4
18
24
2
21
37
22
40
65
56
1
23
30
61
19
49
5
48
20
58
10
31
7
27
51
8
35
38
16
53
13
45
28
41
14
36
32
17
33
11
47
26
12
29
15
62
9
63
59
3
57
#recursive steps: 79817

random/000070_000000000084.input
78
79
80
71
21
11
84
2
73
32
56
81
#recursive steps: 4675

random/000070_000000000210.input

random/000070_000000000420.input
53
223
3
25
65
68
45
61
40
19
43
6
62
22
13
35
14
41
52
70
59
42
20
60
37
36
64
44
28
69
48
12
54
9
17
21
31
46
57
7
2
39
63
16
26
1
11
58
5
29
30
49
56
10
23
18
38
33
66
51
#recursive steps: 450549

random/000070_000000000700.input
17
37
5
69
45
56
48
6
12
65
40
34
25
54
47
68
9
33
46
31
60
7
53
8
20
21
58
49
32
15
52
28
16
39
4
19
41
67
44
61
26
10
51
43
27
57
59
63
2
55
24
11
1
29
22
62
64
30
13
35
42
14
3
18
23
50
38
#recursive steps: 87259

random/000075_000000000090.input
76
45
56
84
86
83
64
54
47
46
89
82
80
#recursive steps: 1333

random/000075_000000000225.input
60
46
63
54
32
39
45
30
138
125
104
31
6
14
48
56
37
42
16
65
43
2
38
70
8
17
69
24
18
1
25
51
11
35
62
74
13
58
66
50
12
44
40
72
64
53
19
4
55
28
166
75
29
52
61
23
49
41
#recursive steps: 18310923

random/000075_000000000450.input
74
61
63
16
31
35
36
33
38
4
5
55
22
10
7
69
60
14
73
50
21
28
65
12
42
59
56
32
54
44
70
29
75
68
41
2
37
57
51
53
25
20
27
67
18
23
43
15
52
8
62
71
66
1
72
13
24
11
30
26
40
46
34
45
58
48
47
17
#recursive steps: 1163217

random/000075_000000000750.input
43
3
517
40
68
74
61
52
41
11
73
71
19
56
12
75
22
62
48
20
14
30
59
27
2
25
8
39
18
4
21
49
7
38
58
15
9
1
64
44
37
28
46
6
26
33
63
47
60
34
51
17
5
55
53
42
67
70
57
65
36
13
54
29
45
10
24
69
72
35
#recursive steps: 58293

random/000080_000000000096.input
94
74
21
82
95
93
85
30
22
56
34
77
83
#recursive steps: 3071

random/000080_000000000240.input

random/000080_000000000480.input
38
32
65
24
146
75
26
43
70
77
12
80
44
18
78
62
34
29
42
51
61
4
25
5
67
33
46
57
73
22
10
9
50
28
48
49
68
14
6
71
54
19
40
58
31
3
59
27
45
66
11
52
35
74
76
41
30
39
16
63
8
79
1
53
20
60
36
21
47
64
72
2
23
#recursive steps: 1370143

random/000080_000000000800.input
25
675
49
32
71
68
38
74
17
16
73
60
47
33
67
63
70
77
10
45
27
53
6
20
59
51
24
41
69
1
79
35
72
48
58
52
76
61
8
9
62
55
66
64
13
78
37
4
7
21
28
14
11
46
19
30
15
34
3
18
54
39
31
23
2
50
26
36
65
42
43
22
75
5
57
12
80
#recursive steps: 135833

random/000085_000000000102.input
101
93
67
31
95
88
62
99
64
98
94
91
89
86
102
92
#recursive steps: 5751

random/000085_000000000255.input

random/000085_000000000510.input
11
83
323
5
55
79
29
57
53
60
45
81
70
4
30
17
7
40
1
16
18
33
46
66
42
85
9
32
14
78
43
77
26
54
25
63
67
36
65
44
41
68
28
52
72
19
64
15
34
39
24
23
22
31
69
74
35
21
6
80
27
2
12
47
61
84
20
10
38
71
56
37
8
49
59
13
#recursive steps: 1781859

random/000085_000000000850.input
81
13
11
627
458
275
71
24
4
9
33
19
73
85
46
35
76
18
70
31
38
17
21
84
42
50
26
10
37
2
59
74
69
77
25
5
32
45
61
83
72
6
80
34
22
15
79
8
64
58
68
54
56
82
55
36
47
63
44
57
53
52
40
41
23
30
49
75
60
16
67
7
78
3
62
12
43
14
27
29
1
48
#recursive steps: 112075

random/000090_000000000108.input
101
100
12
99
95
39
104
102
107
98
94
92
106
108
93
96
21
#recursive steps: 12275

random/000090_000000000270.input

random/000090_000000000540.input
73
15
14
65
1
88
4
48
38
64
50
11
27
2
47
40
10
41
59
6
83
18
63
71
29
17
13
62
80
34
22
86
56
68
60
31
76
46
61
20
8
32
45
70
89
81
43
28
74
37
42
79
85
39
53
66
16
77
49
25
26
84
35
90
12
30
82
69
67
51
21
3
57
23
33
44
52
58
#recursive steps: 1842973

random/000090_000000000900.input
27
2
78
58
73
54
53
76
14
47
46
16
87
61
72
88
64
32
10
83
37
34
66
7
65
5
68
85
59
48
49
56
6
26
42
77
50
11
3
86
30
63
69
62
79
15
35
43
44
75
71
36
33
60
41
17
81
23
38
24
55
51
90
57
18
80
45
9
89
70
13
39
67
29
4
84
25
19
1
52
8
22
31
74
28
#recursive steps: 366397

random/000095_000000000114.input
110
96
35
64
101
107
61
112
18
105
98
97
104
106
102
103
100
113
#recursive steps: 9207

random/000095_000000000285.input

random/000095_000000000570.input
20
19
92
53
552
370
72
286
14
61
37
66
73
10
50
12
59
42
13
71
76
86
16
58
55
22
81
1
57
24
80
38
5
94
33
48
23
7
40
63
49
15
47
56
34
44
90
93
51
79
27
91
85
6
3
25
84
18
35
95
28
30
52
41
4
29
2
67
31
75
46
64
87
39
26
88
82
68
65
77
45
62
54
21
60
89
#recursive steps: 4254159

random/000095_000000000950.input
83
32
19
16
7
52
46
3
44
79
36
88
45
94
59
8
72
34
4
26
64
15
95
47
71
21
54
57
37
53
74
33
69
61
10
91
73
81
29
49
22
50
84
63
27
25
92
28
62
82
39
70
65
77
76
60
67
38
93
12
80
5
85
86
89
55
23
40
66
51
20
58
48
78
41
87
35
90
9
13
2
31
75
17
42
18
6
#recursive steps: 102513

random/000100_000000000120.input
101
111
114
116
109
68
14
26
103
112
106
118
104
102
108
110
119
107
120
113
#recursive steps: 20167

random/000100_000000000300.input

random/000100_000000000600.input

random/000100_000000001000.input
17
1
100
29
90
76
69
63
58
64
57
59
27
19
43
12
60
93
54
49
75
41
73
98
70
2
71
48
34
22
45
44
33
10
32
39
15
7
46
87
51
6
14
8
85
61
16
99
36
78
4
82
9
35
79
81
83
37
26
96
67
31
42
91
89
28
97
80
65
66
3
38
94
25
95
88
5
13
72
40
50
47
68
20
56
30
92
53
55
18
24
74
52
84
21
62
#recursive steps: 552447

random/000200_000000000240.input
225
222
215
239
216
15
209
201
232
230
236
22
212
211
235
208
221
218
224
210
231
217
214
234
229
213
207
223
128
204
228
203
206
220
240
238
227
202
#recursive steps: 627053

random/000200_000000000600.input

random/000200_000000001200.input

random/000200_000000002000.input

dimacs/karate.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 184, in vc_branch
    un_del_vert(neighbours)
  File "vertex_cover_solver.py", line 121, in un_del_vert
    degree_list[degree_adj_vert+1].append(adj_vert)
IndexError: list index out of range

dimacs/dolphins.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 991 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/chesapeake.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 184, in vc_branch
    un_del_vert(neighbours)
  File "vertex_cover_solver.py", line 121, in un_del_vert
    degree_list[degree_adj_vert+1].append(adj_vert)
IndexError: list index out of range

dimacs/adjnoun.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 184, in vc_branch
    un_del_vert(neighbours)
  File "vertex_cover_solver.py", line 121, in un_del_vert
    degree_list[degree_adj_vert+1].append(adj_vert)
IndexError: list index out of range

dimacs/polbooks.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 184, in vc_branch
    un_del_vert(neighbours)
  File "vertex_cover_solver.py", line 121, in un_del_vert
    degree_list[degree_adj_vert+1].append(adj_vert)
IndexError: list index out of range

dimacs/football.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 180, in vc_branch
    del_vert(neighbours)
  File "vertex_cover_solver.py", line 90, in del_vert
    degree_list[degree_adj_vert-1].append(adj_vert)
IndexError: list index out of range

dimacs/celegans_metabolic.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 6 more times]
  File "vertex_cover_solver.py", line 180, in vc_branch
    del_vert(neighbours)
  File "vertex_cover_solver.py", line 90, in del_vert
    degree_list[degree_adj_vert-1].append(adj_vert)
IndexError: list index out of range

dimacs/jazz.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 184, in vc_branch
    un_del_vert(neighbours)
  File "vertex_cover_solver.py", line 121, in un_del_vert
    degree_list[degree_adj_vert+1].append(adj_vert)
IndexError: list index out of range

dimacs/netscience.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 2 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 986 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/email.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 990 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/add20.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 180, in vc_branch
    del_vert(neighbours)
  File "vertex_cover_solver.py", line 90, in del_vert
    degree_list[degree_adj_vert-1].append(adj_vert)
IndexError: list index out of range

dimacs/power.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 4 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 986 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/uk.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 979 more times]
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 11 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/add32.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 12 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 18 more times]
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 954 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/3elt.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 5 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 983 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/data.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 2 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 1 more time]
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 1 more time]
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 3 more times]
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 5 more times]
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 958 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/polblogs.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 180, in vc_branch
    del_vert(neighbours)
  File "vertex_cover_solver.py", line 90, in del_vert
    degree_list[degree_adj_vert-1].append(adj_vert)
IndexError: list index out of range

dimacs/PGPgiantcompo.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 1 more time]
  File "vertex_cover_solver.py", line 180, in vc_branch
    del_vert(neighbours)
  File "vertex_cover_solver.py", line 90, in del_vert
    degree_list[degree_adj_vert-1].append(adj_vert)
IndexError: list index out of range

dimacs/whitaker3.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 1 more time]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 983 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/crack.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 6 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 981 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/fe_4elt2.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 982 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/as-22july06.graph.dimacs

dimacs/cs4.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 4 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 984 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/4elt.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 3 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 3 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 980 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/cond-mat.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 12 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 978 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/cti.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 5 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 2 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 979 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/memplus.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 1 more time]
  File "vertex_cover_solver.py", line 180, in vc_branch
    del_vert(neighbours)
  File "vertex_cover_solver.py", line 90, in del_vert
    degree_list[degree_adj_vert-1].append(adj_vert)
IndexError: list index out of range

dimacs/fe_sphere.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 1 more time]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 985 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/wing_nodal.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 10 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 7 more times]
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 967 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/t60k.graph.dimacs

dimacs/astro-ph.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 22 more times]
  File "vertex_cover_solver.py", line 180, in vc_branch
    del_vert(neighbours)
  File "vertex_cover_solver.py", line 90, in del_vert
    degree_list[degree_adj_vert-1].append(adj_vert)
IndexError: list index out of range

dimacs/wing.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 2 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 984 more times]
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/fe_pwt.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 12 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 978 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/vibrobox.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 17 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 180, in vc_branch
    del_vert(neighbours)
  File "vertex_cover_solver.py", line 90, in del_vert
    degree_list[degree_adj_vert-1].append(adj_vert)
IndexError: list index out of range

dimacs/fe_body.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 11 more times]
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 5 more times]
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 2 more times]
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 962 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/cond-mat-2005.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 38 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 952 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/bcsstk33.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 31 more times]
  File "vertex_cover_solver.py", line 180, in vc_branch
    del_vert(neighbours)
  File "vertex_cover_solver.py", line 90, in del_vert
    degree_list[degree_adj_vert-1].append(adj_vert)
IndexError: list index out of range

dimacs/finan512.graph.dimacs

dimacs/bcsstk29.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 3 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 2 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 6 more times]
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 971 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/brack2.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 1 more time]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 1 more time]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 984 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/fe_ocean.graph.dimacs

dimacs/fe_tooth.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 11 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 973 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/smallworld.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 991 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/G_n_pin_pout.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 5 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 4 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 974 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/bcsstk31.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 9 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 981 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/caidaRouterLevel.graph.dimacs

dimacs/fe_rotor.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 7 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 9 more times]
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 968 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/598a.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 1 more time]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 5 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 980 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/coAuthorsCiteseer.graph.dimacs

dimacs/bcsstk32.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 8 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 7 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 967 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/bcsstk30.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 33 more times]
  File "vertex_cover_solver.py", line 180, in vc_branch
    del_vert(neighbours)
  File "vertex_cover_solver.py", line 90, in del_vert
    degree_list[degree_adj_vert-1].append(adj_vert)
IndexError: list index out of range

dimacs/coAuthorsDBLP.graph.dimacs

dimacs/wave.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 9 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 2 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 975 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/144.graph.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 3 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 2 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 981 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

dimacs/citationCiteseer.graph.dimacs

dimacs/m14b.graph.dimacs

dimacs/cnr-2000.graph.dimacs

dimacs/auto.graph.dimacs

snap/as20000102.txt.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 184, in vc_branch
    un_del_vert(neighbours)
  File "vertex_cover_solver.py", line 121, in un_del_vert
    degree_list[degree_adj_vert+1].append(adj_vert)
IndexError: list index out of range

snap/email-Eu-core.txt.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 184, in vc_branch
    un_del_vert(neighbours)
  File "vertex_cover_solver.py", line 121, in un_del_vert
    degree_list[degree_adj_vert+1].append(adj_vert)
IndexError: list index out of range

snap/ca-GrQc.txt.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 12 more times]
  File "vertex_cover_solver.py", line 180, in vc_branch
    del_vert(neighbours)
  File "vertex_cover_solver.py", line 90, in del_vert
    degree_list[degree_adj_vert-1].append(adj_vert)
IndexError: list index out of range

snap/p2p-Gnutella08.txt.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 53 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 937 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

snap/ca-HepTh.txt.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 16 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 974 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

snap/p2p-Gnutella09.txt.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 53 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 937 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

snap/p2p-Gnutella06.txt.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 8 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 982 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

snap/p2p-Gnutella05.txt.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 17 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 971 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

snap/p2p-Gnutella04.txt.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 12 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 4 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 970 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

snap/p2p-Gnutella25.txt.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 10 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 977 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

snap/facebook_combined.txt.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 180, in vc_branch
    del_vert(neighbours)
  File "vertex_cover_solver.py", line 90, in del_vert
    degree_list[degree_adj_vert-1].append(adj_vert)
IndexError: list index out of range

snap/ca-CondMat.txt.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  [Previous line repeated 10 more times]
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  File "vertex_cover_solver.py", line 182, in vc_branch
    Sv = vc_branch(k-len(neighbours))
  [Previous line repeated 977 more times]
  File "vertex_cover_solver.py", line 165, in vc_branch
    if is_edgeless():
  File "vertex_cover_solver.py", line 135, in is_edgeless
    return max_degree == 0
RecursionError: maximum recursion depth exceeded in comparison

snap/ca-HepPh.txt.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 172, in vc_branch
    Su = vc_branch(k-1)
  File "vertex_cover_solver.py", line 180, in vc_branch
    del_vert(neighbours)
  File "vertex_cover_solver.py", line 90, in del_vert
    degree_list[degree_adj_vert-1].append(adj_vert)
IndexError: list index out of range

snap/email-Enron.txt.dimacs

snap/ca-AstroPh.txt.dimacs
Traceback (most recent call last):
  File "vertex_cover_solver.py", line 210, in <module>
    vc()
  File "vertex_cover_solver.py", line 202, in vc
    S = vc_branch(k)
  File "vertex_cover_solver.py", line 184, in vc_branch
    un_del_vert(neighbours)
  File "vertex_cover_solver.py", line 121, in un_del_vert
    degree_list[degree_adj_vert+1].append(adj_vert)
IndexError: list index out of range

snap/soc-sign-Slashdot081106.txt.dimacs

snap/soc-sign-Slashdot090216.txt.dimacs

snap/soc-sign-Slashdot090221.txt.dimacs

snap/soc-Epinions1.txt.dimacs

snap/soc-Slashdot0811.txt.dimacs

snap/soc-sign-epinions.txt.dimacs

snap/soc-Slashdot0902.txt.dimacs

snap/loc-gowalla_edges.txt.dimacs

snap/amazon0302.txt.dimacs

snap/com-amazon.ungraph.txt.dimacs

random/000002_000000000002.input

random/000002_000000000006.input
1
#recursive steps: 5

random/000002_000000000012.input
7
2
#recursive steps: 11

random/000002_000000000020.input
1
2
#recursive steps: 11

random/000004_000000000004.input

random/000004_000000000012.input
1
6
4
3
#recursive steps: 33

random/000004_000000000024.input
random/000002_000000000002.input

random/000002_000000000006.input
1
#recursive steps: 5

random/000002_000000000012.input
7
2
#recursive steps: 11

random/000002_000000000020.input
1
2
#recursive steps: 11

random/000004_000000000004.input

random/000004_000000000012.input
1
6
4
3
#recursive steps: 33

random/000004_000000000024.input
2
1
4
3
#recursive steps: 29

random/000004_000000000040.input
4
2
3
1
#recursive steps: 29

random/000006_000000000007.input
7
#recursive steps: 5

random/000006_000000000018.input
12
4
6
2
#recursive steps: 29

random/000006_000000000036.input
18
2
3
6
#recursive steps: 29

random/000006_000000000060.input
5
2
4
6
3
#recursive steps: 41

random/000008_000000000009.input
9
#recursive steps: 5

random/000008_000000000024.input
23
2
8
7
4
#recursive steps: 43

random/000008_000000000048.input
37
2
1
5
7
6
3
#recursive steps: 75

random/000008_000000000080.input
7
5
3
4
6
2
1
#recursive steps: 71

random/000010_000000000012.input
12
11
#recursive steps: 13

random/000010_000000000030.input
10
23
15
8
9
7
2
1
#recursive steps: 211

random/000010_000000000060.input
7
2
9
4
5
3
6
8
10
1
#recursive steps: 157

random/000010_000000000100.input
8
4
10
5
7
3
9
2
6
1
#recursive steps: 131

random/000012_000000000014.input
4
#recursive steps: 5

random/000012_000000000036.input
3
9
33
13
7
4
12
6
1
5
#recursive steps: 381

random/000012_000000000072.input
47
8
1
11
7
3
9
2
5
12
4
#recursive steps: 177

random/000012_000000000120.input
6
7
1
5
2
11
9
8
4
10
3
#recursive steps: 169

random/000014_000000000016.input
15
16
#recursive steps: 13

random/000014_000000000042.input
37
1
12
14
2
10
5
11
#recursive steps: 109

random/000014_000000000084.input
18
3
12
8
10
13
4
9
11
5
6
7
14
#recursive steps: 287

random/000014_000000000140.input
95
2
12
9
7
11
10
8
14
13
1
6
4
#recursive steps: 209

random/000016_000000000019.input
9
#recursive steps: 5

random/000016_000000000048.input
7
2
11
13
6
1
16
12
10
3
9
#recursive steps: 365

random/000016_000000000096.input
11
88
16
6
12
8
1
5
3
9
14
13
7
15
10
#recursive steps: 543

random/000016_000000000160.input
11
6
8
13
16
9
2
4
15
10
12
7
1
3
14
#recursive steps: 275

random/000018_000000000021.input
20
4
#recursive steps: 11

random/000018_000000000054.input
12
26
31
7
13
8
10
17
6
4
11
#recursive steps: 323

random/000018_000000000108.input
2
85
7
5
10
4
14
3
15
6
11
12
17
16
13
#recursive steps: 397

random/000018_000000000180.input
162
102
16
17
18
15
12
1
2
7
13
10
3
14
8
9
5
#recursive steps: 601

random/000020_000000000024.input
19
15
#recursive steps: 11

random/000020_000000000060.input
41
56
9
5
20
15
26
10
19
17
2
11
16
4
3
#recursive steps: 1743

random/000020_000000000120.input
5
120
6
12
20
15
11
8
7
18
3
2
17
16
1
4
19
13
#recursive steps: 1081

random/000020_000000000200.input
82
11
2
20
8
4
14
7
6
15
16
19
9
1
12
3
18
17
#recursive steps: 423

random/000022_000000000026.input
18
25
16
#recursive steps: 23

random/000022_000000000066.input
17
56
8
65
42
20
11
19
15
2
13
14
3
22
16
#recursive steps: 2337

random/000022_000000000132.input
16
2
12
6
21
15
4
20
19
18
5
3
22
10
9
8
11
7
17
#recursive steps: 1037

random/000022_000000000220.input
164
17
11
3
20
8
9
22
10
21
16
14
5
18
4
1
13
12
6
15
#recursive steps: 721

random/000024_000000000028.input
10
28
25
3
#recursive steps: 61

random/000024_000000000072.input
50
20
6
10
7
3
17
14
2
16
18
22
#recursive steps: 293

random/000024_000000000144.input
22
11
15
18
20
5
16
24
10
8
1
2
7
4
14
13
19
9
23
21
12
6
#recursive steps: 1879

random/000024_000000000240.input
124
10
2
12
15
22
8
19
6
16
5
24
3
20
18
11
13
14
1
4
17
23
#recursive steps: 675

random/000026_000000000031.input
4
16
22
28
29
#recursive steps: 95

random/000026_000000000078.input
16
45
18
63
22
20
4
5
7
14
23
11
26
6
9
24
17
2
21
25
#recursive steps: 13131

random/000026_000000000156.input
10
100
64
9
4
1
2
7
20
8
12
13
6
18
19
25
24
23
16
15
26
14
17
#recursive steps: 3269

random/000026_000000000260.input
17
24
7
3
5
9
1
16
2
4
23
18
10
11
13
26
6
22
20
19
25
8
14
15
21
#recursive steps: 1395

random/000028_000000000033.input
29
33
8
30
#recursive steps: 33

random/000028_000000000084.input
6
4
17
71
28
1
16
7
2
20
21
24
12
22
9
23
10
26
19
3
#recursive steps: 6513

random/000028_000000000168.input
12
23
17
4
8
6
14
11
10
7
19
3
16
27
21
1
9
18
2
20
22
13
24
25
5
15
#recursive steps: 5337

random/000028_000000000280.input
190
20
3
21
17
13
28
25
11
27
1
18
16
24
7
23
6
10
4
14
15
2
#recursive steps: 601

random/000030_000000000036.input
17
33
22
11
32
#recursive steps: 67

random/000030_000000000090.input
16
26
66
68
52
13
2
10
12
14
15
7
29
5
4
19
1
25
11
20
3
#recursive steps: 10461

random/000030_000000000180.input
55
118
34
99
29
15
10
24
20
23
28
14
16
17
1
22
26
9
13
27
4
19
2
11
3
8
6
#recursive steps: 4783

random/000030_000000000300.input
17
224
25
8
16
27
23
28
14
10
6
2
7
5
19
26
20
13
1
4
24
29
12
21
11
#recursive steps: 797

random/000035_000000000042.input
20
36
40
34
41
9
#recursive steps: 191

random/000035_000000000105.input
31
72
20
52
9
25
10
33
32
19
5
28
11
6
34
13
29
8
3
4
16
24
22
30
12
2
#recursive steps: 62967

random/000035_000000000210.input
26
13
27
18
9
11
29
4
35
17
6
20
14
23
12
34
5
10
2
3
32
33
7
16
8
19
#recursive steps: 2157

random/000035_000000000350.input
20
203
83
30
4
7
19
23
6
16
24
12
14
25
21
10
26
11
5
28
33
22
29
8
2
27
13
15
9
34
3
17
31
35
#recursive steps: 4295

random/000040_000000000048.input
45
17
48
46
41
47
44
#recursive steps: 99

random/000040_000000000120.input
14
21
26
15
10
77
27
101
29
50
47
94
38
13
12
17
19
22
40
18
1
28
37
23
33
34
39
35
30
4
#recursive steps: 524983

random/000040_000000000240.input
36
40
66
38
27
16
28
10
2
29
23
20
7
4
33
13
6
18
26
9
5
39
15
22
32
30
25
17
14
31
24
1
12
34
37
#recursive steps: 24567

random/000040_000000000400.input
5
268
263
34
8
38
25
17
14
31
39
3
40
7
36
32
15
27
26
2
1
37
6
18
10
29
13
28
30
33
21
4
12
20
23
9
#recursive steps: 3831

random/000045_000000000054.input
17
51
53
12
19
39
#recursive steps: 119

random/000045_000000000135.input
35
41
32
14
120
81
5
40
26
23
20
44
18
8
39
42
12
45
28
17
30
22
37
13
27
21
9
4
10
24
43
29
#recursive steps: 117733

random/000045_000000000270.input
28
121
229
13
38
45
23
17
27
26
14
34
15
19
31
20
22
2
18
21
39
41
4
33
9
35
30
3
24
29
40
7
36
5
32
12
25
11
44
#recursive steps: 22307

random/000045_000000000450.input
30
34
9
43
182
21
12
4
11
39
1
24
5
8
35
25
10
33
18
20
45
44
40
32
15
41
42
3
23
13
38
26
29
27
22
14
28
19
17
7
#recursive steps: 7235

random/000050_000000000060.input
1
21
43
24
51
52
33
49
53
#recursive steps: 733

random/000050_000000000150.input
8
5
19
130
17
33
45
69
44
95
27
143
101
142
49
9
50
40
15
16
35
46
38
7
11
48
26
43
2
1
30
41
21
4
25
92
34
32
37
20
42
31
#recursive steps: 49220635

random/000050_000000000300.input
179
2
40
261
48
23
44
33
39
118
22
37
26
31
38
41
32
50
1
45
43
24
10
13
12
14
17
34
29
20
7
18
15
3
49
4
11
30
35
5
25
46
27
9
47
8
#recursive steps: 91605

random/000050_000000000500.input
38
42
316
30
31
37
10
17
35
43
23
18
1
39
49
26
25
8
3
7
5
46
34
15
6
20
9
22
36
16
47
41
33
24
13
48
14
2
45
28
4
11
32
12
29
21
19
#recursive steps: 14833

random/000055_000000000066.input
56
61
19
22
51
39
60
58
#recursive steps: 259

random/000055_000000000165.input
47
33
19
53
21
16
14
45
139
46
34
164
96
106
22
23
31
55
75
40
29
3
8
30
7
5
42
1
52
36
12
38
41
54
27
4
24
35
37
#recursive steps: 3712343

random/000055_000000000330.input
42
34
3
111
45
16
14
7
33
52
25
48
41
46
36
28
35
5
11
47
13
39
17
49
24
6
2
19
54
38
51
40
10
27
50
43
37
44
8
15
31
18
32
12
1
23
9
20
#recursive steps: 81531

random/000055_000000000550.input
51
40
55
6
27
33
45
47
9
8
54
26
23
50
3
17
37
39
49
29
52
28
22
38
34
44
24
48
12
13
36
31
32
19
4
53
16
2
41
18
15
5
14
46
35
7
10
20
43
#recursive steps: 15815

random/000060_000000000072.input
1
32
64
65
66
17
69
57
72
50
#recursive steps: 1739

random/000060_000000000180.input
133
58
12
57
60
36
28
131
11
148
171
102
55
7
29
54
39
50
120
35
30
52
15
24
53
5
25
3
18
44
48
19
2
40
8
59
42
10
17
27
31
26
16
#recursive steps: 3564309

random/000060_000000000360.input
50
34
13
274
51
36
41
25
19
42
3
55
17
30
4
57
45
5
52
47
37
8
28
20
35
56
2
12
15
29
60
16
49
11
6
40
14
43
24
53
10
1
18
58
22
38
54
31
7
32
#recursive steps: 88499

random/000060_000000000600.input
2
31
59
236
50
23
57
28
1
22
42
21
25
11
40
30
6
47
13
10
34
35
8
16
45
32
12
56
3
41
55
44
36
60
37
15
49
4
17
29
43
18
54
53
39
48
14
7
33
38
52
5
58
#recursive steps: 13707

random/000065_000000000078.input
73
56
68
60
37
58
15
59
53
23
78
#recursive steps: 1471

random/000065_000000000195.input

random/000065_000000000390.input
36
11
35
48
189
302
46
10
40
8
22
12
39
24
19
14
6
65
55
64
9
4
15
63
52
16
26
33
54
50
62
25
20
30
13
42
5
37
45
32
57
31
29
18
27
59
60
58
3
34
44
38
41
61
53
2
17
49
47
#recursive steps: 231183

random/000065_000000000650.input
54
34
6
64
39
44
43
25
46
60
55
50
4
18
24
2
21
37
22
40
65
56
1
23
30
61
19
49
5
48
20
58
10
31
7
27
51
8
35
38
16
53
13
45
28
41
14
36
32
17
33
11
47
26
12
29
15
62
9
63
59
3
57
#recursive steps: 79817

random/000070_000000000084.input
78
79
80
71
21
11
84
2
73
32
56
81
#recursive steps: 4675

random/000070_000000000210.input

random/000070_000000000420.input
53
223
3
25
65
68
45
61
40
19
43
6
62
22
13
35
14
41
52
70
59
42
20
60
37
36
64
44
28
69
48
12
54
9
17
21
31
46
57
7
2
39
63
16
26
1
11
58
5
29
30
49
56
10
23
18
38
33
66
51
#recursive steps: 450549

random/000070_000000000700.input
17
37
5
69
45
56
48
6
12
65
40
34
25
54
47
68
9
33
46
31
60
7
53
8
20
21
58
49
32
15
52
28
16
39
4
19
41
67
44
61
26
10
51
43
27
57
59
63
2
55
24
11
1
29
22
62
64
30
13
35
42
14
3
18
23
50
38
#recursive steps: 87259

random/000075_000000000090.input
76
45
56
84
86
83
64
54
47
46
89
82
80
#recursive steps: 1333

random/000075_000000000225.input
60
46
63
54
32
39
45
30
138
125
104
31
6
14
48
56
37
42
16
65
43
2
38
70
8
17
69
24
18
1
25
51
11
35
62
74
13
58
66
50
12
44
40
72
64
53
19
4
55
28
166
75
29
52
61
23
49
41
#recursive steps: 18310923

random/000075_000000000450.input
74
61
63
16
31
35
36
33
38
4
5
55
22
10
7
69
60
14
73
50
21
28
65
12
42
59
56
32
54
44
70
29
75
68
41
2
37
57
51
53
25
20
27
67
18
23
43
15
52
8
62
71
66
1
72
13
24
11
30
26
40
46
34
45
58
48
47
17
#recursive steps: 1163217

random/000075_000000000750.input
43
3
517
40
68
74
61
52
41
11
73
71
19
56
12
75
22
62
48
20
14
30
59
27
2
25
8
39
18
4
21
49
7
38
58
15
9
1
64
44
37
28
46
6
26
33
63
47
60
34
51
17
5
55
53
42
67
70
57
65
36
13
54
29
45
10
24
69
72
35
#recursive steps: 58293

random/000080_000000000096.input
94
74
21
82
95
93
85
30
22
56
34
77
83
#recursive steps: 3071

random/000080_000000000240.input

random/000080_000000000480.input
38
32
65
24
146
75
26
43
70
77
12
80
44
18
78
62
34
29
42
51
61
4
25
5
67
33
46
57
73
22
10
9
50
28
48
49
68
14
6
71
54
19
40
58
31
3
59
27
45
66
11
52
35
74
76
41
30
39
16
63
8
79
1
53
20
60
36
21
47
64
72
2
23
#recursive steps: 1370143

random/000080_000000000800.input
25
675
49
32
71
68
38
74
17
16
73
60
47
33
67
63
70
77
10
45
27
53
6
20
59
51
24
41
69
1
79
35
72
48
58
52
76
61
8
9
62
55
66
64
13
78
37
4
7
21
28
14
11
46
19
30
15
34
3
18
54
39
31
23
2
50
26
36
65
42
43
22
75
5
57
12
80
#recursive steps: 135833

random/000085_000000000102.input
101
93
67
31
95
88
62
99
64
98
94
91
89
86
102
92
#recursive steps: 5751

random/000085_000000000255.input

random/000085_000000000510.input
11
83
323
5
55
79
29
57
53
60
45
81
70
4
30
17
7
40
1
16
18
33
46
66
42
85
9
32
14
78
43
77
26
54
25
63
67
36
65
44
41
68
28
52
72
19
64
15
34
39
24
23
22
31
69
74
35
21
6
80
27
2
12
47
61
84
20
10
38
71
56
37
8
49
59
13
#recursive steps: 1781859

random/000085_000000000850.input
81
13
11
627
458
275
71
24
4
9
33
19
73
85
46
35
76
18
70
31
38
17
21
84
42
50
26
10
37
2
59
74
69
77
25
5
32
45
61
83
72
6
80
34
22
15
79
8
64
58
68
54
56
82
55
36
47
63
44
57
53
52
40
41
23
30
49
75
60
16
67
7
78
3
62
12
43
14
27
29
1
48
#recursive steps: 112075

random/000090_000000000108.input
101
100
12
99
95
39
104
102
107
98
94
92
106
108
93
96
21
#recursive steps: 12275

random/000090_000000000270.input
